import { createClient } from '@supabase/supabase-js';
import { NextResponse } from 'next/server';

// Initialize Supabase Admin client
const supabaseAdmin = process.env.SUPABASE_SERVICE_ROLE_KEY && process.env.NEXT_PUBLIC_SUPABASE_URL
  ? createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY,
      {
        auth: {
          autoRefreshToken: false,
          persistSession: false,
        },
      }
    )
  : null;

export async function GET() {
  try {
    // Check if supabaseAdmin is initialized
    if (!supabaseAdmin) {
      return NextResponse.json(
        { error: 'Supabase admin client not initialized. Check environment variables.' },
        { status: 500 }
      );
    }

    // Check if topics are already selected for today
    const today = new Date().toISOString().split('T')[0];
    const { data: existingTopics, error: checkError } = await supabaseAdmin
      .from("daily_topics")
      .select("id")
      .eq("date", today);

    if (checkError) {
      console.error('Error checking existing topics:', checkError);
      return NextResponse.json({ error: 'Failed to check existing topics' }, { status: 500 });
    }

    // If topics already exist for today, don't create new ones
    if (existingTopics && existingTopics.length > 0) {
      return NextResponse.json({ message: 'Topics already selected for today', existingTopics });
    }

    // Rest of your function logic here...
    
    return NextResponse.json({ message: 'New topics selected for today' });
  } catch (error) {
    console.error('Error in daily-debate-topics cron job:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}
